// Code generated by MockGen. DO NOT EDIT.
// Source: page.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	notionapi "github.com/conduitio-labs/notionapi"
	gomock "github.com/golang/mock/gomock"
)

// MockPageService is a mock of PageService interface.
type MockPageService struct {
	ctrl     *gomock.Controller
	recorder *MockPageServiceMockRecorder
}

// MockPageServiceMockRecorder is the mock recorder for MockPageService.
type MockPageServiceMockRecorder struct {
	mock *MockPageService
}

// NewMockPageService creates a new mock instance.
func NewMockPageService(ctrl *gomock.Controller) *MockPageService {
	mock := &MockPageService{ctrl: ctrl}
	mock.recorder = &MockPageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPageService) EXPECT() *MockPageServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPageService) Create(arg0 context.Context, arg1 *notionapi.PageCreateRequest) (*notionapi.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*notionapi.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPageServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPageService)(nil).Create), arg0, arg1)
}

// Get mocks base method.
func (m *MockPageService) Get(arg0 context.Context, arg1 notionapi.PageID) (*notionapi.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*notionapi.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPageServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPageService)(nil).Get), arg0, arg1)
}

// Update mocks base method.
func (m *MockPageService) Update(arg0 context.Context, arg1 notionapi.PageID, arg2 *notionapi.PageUpdateRequest) (*notionapi.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*notionapi.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPageServiceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPageService)(nil).Update), arg0, arg1, arg2)
}
